package com.example.demo.customer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.Optional;
import com.example.demo.rank.Ranks;
import com.example.demo.rank.ranksRepository;
@RestController
@CrossOrigin(origins = "*")
public class customerController {

    @Autowired
    private customerRepository customerRepository;
    
    @Autowired
    private ranksRepository ranksRepository; // Cần phải tạo repository cho Rank
    @GetMapping("/getAllCustomers")
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    @GetMapping("/getCustomerById/{id}")
    public Optional<Customer> getCustomerById(String id) {
        return customerRepository.findById(id);
    }
    
    @PostMapping("/saveOrUpdateCustomer")
    public ResponseEntity<String> saveOrUpdateCustomer(@RequestBody Customer customer) {
        // Kiểm tra nếu Customer đã tồn tại
        Optional<Customer> existingCustomer = customerRepository.findById(customer.getIdCustomer());
        
        if (existingCustomer.isPresent()) {
            return ResponseEntity.status(400).body("Customer with this ID already exists.");
        }

        // Tạo mới Rank nếu chưa có
        if (customer.getRank() == null) {
            Ranks newRank = new Ranks();
            newRank.setIdRank("RANK_DEFAULT");  // ID mặc định của Rank
            newRank.setNameRank("Rank Mặc Định"); // Tên mặc định của Rank
            newRank.setCustomer(customer); // Liên kết Rank với Customer
            customer.setRank(newRank); // Gán Rank mới cho Customer
        }

        // Lưu Customer (đã xử lý tự động gán account và password)
        customerRepository.save(customer);
        
        // Lưu Rank vào cơ sở dữ liệu nếu Rank mới tạo
        ranksRepository.save(customer.getRank());

        return ResponseEntity.status(201).body("Customer created successfully.");
    }


    @PostMapping("/deleteCustomer")
    public void deleteCustomer(@RequestBody String id) {
        customerRepository.deleteById(id);
    }
}
