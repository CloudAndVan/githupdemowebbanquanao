package com.example.demo.customer;

import org.apache.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.Optional;

import com.example.demo.order.Orders;
import com.example.demo.rank.Ranks;
import com.example.demo.rank.ranksRepository;

@RestController
@CrossOrigin(origins = "*")
public class customerController {

    @Autowired
    private customerRepository customerRepository;

    @Autowired
    private CustomerService customerService;
    
    @GetMapping("/getAllCustomers")
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    @GetMapping("/getCustomerById/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable String id) {
        Optional<Customer> customer = customerRepository.findById(id);
        
        if (customer.isPresent()) {
            return ResponseEntity.ok(customer.get());
        } else {
            return ResponseEntity.status(404).body(null); // Nếu không tìm thấy khách hàng
        }
    }

    // Phương thức để lưu hoặc cập nhật khách hàng
    @PostMapping("/saveOrUpdateCustomer")
    public ResponseEntity<Customer> saveOrUpdateCustomer(@RequestBody Customer customer) {
        Customer savedCustomer = customerService.saveOrUpdateCustomer(customer);
        return ResponseEntity.ok(savedCustomer);
    }

    
    @PostMapping("/deleteCustomer/{id}")
    public ResponseEntity<String> deleteCustomer(@PathVariable String id) {
        Optional<Customer> customer = customerRepository.findById(id);
        
        if (customer.isPresent()) {
            customerRepository.deleteById(id);
            return ResponseEntity.status(200).body("Customer deleted successfully.");
        } else {
            return ResponseEntity.status(404).body("Customer not found.");
        }
    }
}
